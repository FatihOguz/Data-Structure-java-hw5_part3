memberSearchIndex = [{"p":"<Unnamed>","c":"AgeSearchTree","l":"add(BinaryTree.AgeData<E>)","url":"add(BinaryTree.AgeData)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"add(BinaryTree.AgeData<E>, E)","url":"add(BinaryTree.AgeData,E)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"add(BinaryTree.AgeData<E>, E, int)","url":"add(BinaryTree.AgeData,E,int)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"add(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"add(E)"},{"p":"<Unnamed>","c":"SearchTree","l":"add(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"addReturn"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"AgeData()","url":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"AgeData(E)","url":"%3Cinit%3E(E)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"AgeData(E, BinaryTree.AgeData<E>, BinaryTree.AgeData<E>)","url":"%3Cinit%3E(E,BinaryTree.AgeData,BinaryTree.AgeData)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"AgeData(E, int)","url":"%3Cinit%3E(E,int)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"AgeSearchTree()","url":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"binarySearchTree"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"BinarySearchTree()","url":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"BinaryTree","l":"BinaryTree()","url":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"BinaryTree","l":"BinaryTree(BinaryTree.AgeData<E>)","url":"%3Cinit%3E(BinaryTree.AgeData)"},{"p":"<Unnamed>","c":"BinaryTree","l":"BinaryTree(E, BinaryTree<E>, BinaryTree<E>)","url":"%3Cinit%3E(E,BinaryTree,BinaryTree)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"compare(Object, Object)","url":"compare(java.lang.Object,java.lang.Object)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"compareTo(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"contains(E)"},{"p":"<Unnamed>","c":"SearchTree","l":"contains(E)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"data"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"delete(BinaryTree.AgeData<E>, E)","url":"delete(BinaryTree.AgeData,E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"delete(E)"},{"p":"<Unnamed>","c":"SearchTree","l":"delete(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"deleteReturn"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"find(BinaryTree.AgeData<E>, E)","url":"find(BinaryTree.AgeData,E)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"find(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"find(E)"},{"p":"<Unnamed>","c":"SearchTree","l":"find(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"findLargestChild(BinaryTree.AgeData<E>)","url":"findLargestChild(BinaryTree.AgeData)"},{"p":"<Unnamed>","c":"BinaryTree","l":"getData()"},{"p":"<Unnamed>","c":"BinaryTree","l":"getLeftSubtree()"},{"p":"<Unnamed>","c":"BinaryTree","l":"getRightSubtree()"},{"p":"<Unnamed>","c":"BinaryTree","l":"isLeaf()"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"left"},{"p":"<Unnamed>","c":"Main","l":"Main()","url":"%3Cinit%3E()"},{"p":"<Unnamed>","c":"Main","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"numberOfPeople"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"olderThan(BinaryTree.AgeData, int, int)","url":"olderThan(BinaryTree.AgeData,int,int)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"olderThan(int)"},{"p":"<Unnamed>","c":"BinaryTree","l":"preOrderTraverse(BiConsumer<E, Integer>)","url":"preOrderTraverse(java.util.function.BiConsumer)"},{"p":"<Unnamed>","c":"BinaryTree","l":"preOrderTraverse(BinaryTree.AgeData<E>, int, BiConsumer<E, Integer>)","url":"preOrderTraverse(BinaryTree.AgeData,int,java.util.function.BiConsumer)"},{"p":"<Unnamed>","c":"BinaryTree","l":"readBinaryTree(Scanner)","url":"readBinaryTree(java.util.Scanner)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"remove(E)"},{"p":"<Unnamed>","c":"BinarySearchTree","l":"remove(E)"},{"p":"<Unnamed>","c":"SearchTree","l":"remove(E)"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"right"},{"p":"<Unnamed>","c":"BinaryTree","l":"root"},{"p":"<Unnamed>","c":"BinaryTree","l":"toString()"},{"p":"<Unnamed>","c":"BinaryTree.AgeData","l":"toString()"},{"p":"<Unnamed>","c":"BinaryTree","l":"toString(BinaryTree.AgeData<E>, int, StringBuilder)","url":"toString(BinaryTree.AgeData,int,java.lang.StringBuilder)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"youngerThan(BinaryTree.AgeData, int, int)","url":"youngerThan(BinaryTree.AgeData,int,int)"},{"p":"<Unnamed>","c":"AgeSearchTree","l":"youngerThan(int)"}]